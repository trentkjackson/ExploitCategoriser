import com.sun.xml.internal.ws.util.StringUtils;
import core.Categoriser;
import core.Parser;
import core.data.Categories;
import static core.Parser.DATA;
import java.util.*;

public class ExploitCategorizer {
    private static void help() {
        System.out.print("[Using the arguments]\n- When using EC the following arguments are required.\n  \n  [The amount of pages to be searched, remember a high number will take longer to load]\n  \"?pages:#\"\n\n  [The query to be referenced in categories, note: if you would like to use mulitple words you must seperate them with a double ampersand symbol.]\n  \"?query:#\"\n\n- Once you are brought to the categories found with your query referenced you can view them by typing... \n  \n  [*] being either key words from their title or just the title itself.\n  \"?ls:%s\" \n\n   e.g. \"?ls:denial\" will open the Denial of Service category.\n\n\n[Adding your own data and/or categories]\n- Adding data and categories is simple, to add data to the pre-existing categories just add keywords to the category array of your picking, which can be found in the \"src/main/java/core/data/Categories.java\" file.\n\n- To add your very own category you need the reference data which can be created like so...\n\n    [Must be a string array as it is what the following method requests]\n    String[] Metasploit_Exploits_Category = {\n        \"metasploit\", \"meta\"\n    };\n\n- Now to add this data into the categoriser system we must use the following method anywhere before the Categoriser class is instantiated.\n\n    [The text between quotes being the category name]\n    Categories.AddCategory(Metasploit_Exploits_Category, \"Metasploit Exploits\");\n\n- And you're done! You should see your category appear on the next compile and may view it by following the same procedure as stated above.");
    }

    public static void main(String[] args) {
        int pages_to_parse = 1;
        Scanner in = new Scanner(System.in);
        String query = null;
        for(String arg : args) {

            if(arg.contains("?pages:")) {
                pages_to_parse = Integer.parseInt(arg.substring(arg.indexOf(":") + 1, arg.length()));
            }
            if(arg.contains("?query:")) {
                query = arg.substring(arg.indexOf(":") + 1, arg.length()).toLowerCase();;
                if(arg.contains("&&")) {
                    query = query.replaceAll("&&", " ");
                }
            }
            if(arg.equals("?help")) {
                help();
            }
        }
        Parser parser = new Parser(pages_to_parse);
        if(query == null) {
            System.out.println("Error; no query supplied.");
            return;
        }

        String[] Metasploit_Exploits_Category = {
                "metasploit", "meta"
        };
        Categories.AddCategory(Metasploit_Exploits_Category, "Metasploit Exploits");

        System.out.println("Collecting data from exploit-db...");
        List<String> authors = new ArrayList<>(parser.Parse(DATA.AUTHORS));
        List<String> titles = new ArrayList<>(parser.Parse(DATA.TITLES));
        List<String> platforms = new ArrayList<>(parser.Parse(DATA.PLATFORMS));
        int references = 0;
        authors.replaceAll(String::toLowerCase);
        titles.replaceAll(String::toLowerCase);
        platforms.replaceAll(String::toLowerCase);
        for(int r = 0; r < authors.size(); r++) {
            if(authors.get(r).contains(query) || titles.get(r).contains(query) || platforms.get(r).contains(query)) {
                references++;
            }
        }
        System.out.println("Found " + references + " possible references for \"" + query+ "\" found within " + pages_to_parse + " pages.");
        Categoriser sorter = new Categoriser(authors, titles, platforms, query);
        Dictionary<String, List<String[]>> categories = sorter.Sort();

        System.out.println("\nReferences were located in following areas.");
        StringBuilder printfTemplate = new StringBuilder();
        int category_count = Categories.CategoryNames.size();
        for(int x = 0; x < category_count; x++) {
            printfTemplate.append("[+] %s (%s)       ");
            printfTemplate.append((x % 2 == 1) ? "\n" : "");
        }
        Categories.PrintCategories(printfTemplate.toString(), categories);
        String categoricalQuery = in.nextLine().toLowerCase().replaceAll(" ", "").replaceAll("&&", " ");

        Dictionary<String, List<String>> keywords = new Hashtable<>();
        for(int m = 0; m < Categories.CategoryNames.size(); m++) {
            String[] common_words = {
                    "of", "exploits", "exploit"
            };
            String split_category_name = Categories.CategoryNames.get(m).toLowerCase();
            for(String replacement : common_words) {
                split_category_name = split_category_name.replaceAll(replacement, "");
            }
            List<String> words = new ArrayList<>(Arrays.asList(split_category_name.split(" ")));
            keywords.put(Categories.CategoryNames.get(m), words);
        }

        for(int b = 0; b < category_count; b++) {
            if(categoricalQuery.contains("?ls:") && (keywords.get(Categories.CategoryNames.get(b)).contains(categoricalQuery.substring(categoricalQuery.indexOf(":") + 1, categoricalQuery.length()))
                || categoricalQuery.contains(Categories.CategoryNames.get(b))))
            {
                listSets(Categories.CategoryNames.get(b), categories);
            }
        }
        /*
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("pos") || categoricalQuery.contains("point") || categoricalQuery.contains("concept"))) {
            listSets(Categories.CategoryNames.get(1), categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("windows") || categoricalQuery.contains("win"))) {
            listSets(Categories.CategoryNames.get(2), categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("linux") || categoricalQuery.contains("grub"))) {
            listSets(Categories.CategoryNames.get(3), categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("unix") || categoricalQuery.contains("solaris"))) {
            listSets(Categories.CategoryNames.get(4), categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("osx") || categoricalQuery.contains("macos") || categoricalQuery.contains("mac") || categoricalQuery.contains("apple"))) {
            listSets(Categories.CategoryNames.get(5), categories);
        }
        */


    }

    private static void listSets(String key, Dictionary<String, List<String[]>> categories) {
        for(int i = 0; i < categories.get(key).size(); i++) {
            System.out.printf("\nTitle: %s\nPlatform: %s\nAuthor: %s\n",
                    StringUtils.capitalize(categories.get(key).get(i)[0]),
                    StringUtils.capitalize(categories.get(key).get(i)[1]),
                    StringUtils.capitalize(categories.get(key).get(i)[2]));
        }
    }
}
