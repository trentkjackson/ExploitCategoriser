import com.sun.xml.internal.ws.util.StringUtils;
import core.Categoriser;
import core.Parser;
import core.data.Categories;

import static core.Parser.DATA;

import java.util.*;

public class ExploitCategorizer {
    private static void help() {
        System.out.printf("<-- Using Arguments -->\n Query's are added like so, ?");
    }

    public static void main(String[] args) {
        int pages_to_parse = 1;
        Scanner in = new Scanner(System.in);
        String query = null;
        for(String arg : args) {

            if(arg.contains("?pages:")) {
                pages_to_parse = Integer.parseInt(arg.substring(arg.indexOf(":") + 1, arg.length()));
            }
            if(arg.contains("?query:")) {
                query = arg.substring(arg.indexOf(":") + 1, arg.length()).toLowerCase();;
                if(arg.contains("&&")) {
                    query = query.replaceAll("&&", " ");
                }
            }
            if(arg.equals("?help")) {
                help();
            }
        }
        Parser parser = new Parser(pages_to_parse);
        if(query == null) {
            System.out.println("Error; no query supplied.");
            return;
        }
        System.out.println("Collecting data from exploit-db...");
        List<String> authors = new ArrayList<>(parser.Parse(DATA.AUTHORS));
        List<String> titles = new ArrayList<>(parser.Parse(DATA.TITLES));
        List<String> platforms = new ArrayList<>(parser.Parse(DATA.PLATFORMS));
        int references = 0;
        authors.replaceAll(String::toLowerCase);
        titles.replaceAll(String::toLowerCase);
        platforms.replaceAll(String::toLowerCase);
        for(int r = 0; r < authors.size(); r++) {
            if(authors.get(r).contains(query) || titles.get(r).contains(query) || platforms.get(r).contains(query)) {
                references++;
            }
        }
        System.out.println("Found " + references + " possible references for \"" + query+ "\" found within " + pages_to_parse + " pages.");
        Categoriser sorter = new Categoriser(authors, titles, platforms, query);
        Dictionary<String, List<String[]>> categories = sorter.Sort();

        System.out.println("\nReferences were located in following areas.");
        StringBuilder printfTemplate = new StringBuilder();
        int category_count = Categories.CategoryNames.length;
        for(int x = 0; x < category_count; x++) {
            printfTemplate.append("[+] %s (%s)       ");
            printfTemplate.append((x % 2 == 1) ? "\n" : "");
        }
        Categories.PrintCategories(printfTemplate.toString(), categories);
        String categoricalQuery = in.nextLine().toLowerCase().replaceAll(" ", "").replaceAll("&&", " ");
        if(categoricalQuery.contains("?ls:") &&
                (categoricalQuery.contains("denial") || categoricalQuery.contains("of") || categoricalQuery.contains("service")
                || categoricalQuery.contains("dos") || categoricalQuery.contains("ddos"))) {
            listSets(Categories.CategoryNames[0], categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("pos") || categoricalQuery.contains("point") || categoricalQuery.contains("concept"))) {
            listSets(Categories.CategoryNames[1], categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("windows") || categoricalQuery.contains("win"))) {
            listSets(Categories.CategoryNames[2], categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("linux") || categoricalQuery.contains("grub"))) {
            listSets(Categories.CategoryNames[3], categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("unix") || categoricalQuery.contains("solaris"))) {
            listSets(Categories.CategoryNames[4], categories);
        }
        if(categoricalQuery.contains("?ls:") && (categoricalQuery.contains("osx") || categoricalQuery.contains("macos") || categoricalQuery.contains("mac") || categoricalQuery.contains("apple"))) {
            listSets(Categories.CategoryNames[5], categories);
        }


    }

    private static void listSets(String key, Dictionary<String, List<String[]>> categories) {
        for(int i = 0; i < categories.get(key).size(); i++) {
            System.out.printf("\nTitle: %s\nPlatform: %s\nAuthor: %s\n",
                    StringUtils.capitalize(categories.get(key).get(i)[0]),
                    StringUtils.capitalize(categories.get(key).get(i)[1]),
                    StringUtils.capitalize(categories.get(key).get(i)[2]));
        }
    }
}
