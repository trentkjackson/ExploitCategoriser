package core;

import com.sun.xml.internal.ws.util.StringUtils;
import sun.nio.cs.ext.DoubleByte;

import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;

public class Categoriser {
    private List<String> authors;
    private List<String> titles;
    private List<String> platforms;
    private String queried;
    public Categoriser(List<String> _authors, List<String> _titles, List<String> _platforms, String query) {
        this.authors = _authors;
        this.platforms = _platforms;
        this.titles = _titles;
        this.queried = query.toLowerCase();
    }

    public static final String[] CategoryKeys = {"Denial of Service", "PoS Exploits", "Windows Exploits", "Linux Exploits", "Unix Exploits", "OSX Exploits"};

    public Dictionary<String, List<String[]>> Sort() {
        // Categories
        String[] Denial_Of_Service_Tools = {
                "dos", "ddos", "denial", "service", "denial of service", "booter", "boot", "stress", "stresser",
                "migration", "flood", "rudy", "r.u.d.y", "syn", "syn flood", "syn-flood", "udp", "icmp", "ping",
                "icmp flood", "ping flood", "pod", "death", "slowloris", "ntp", "amplification", "http"
        };

        String[] PoS_Exploits = {
                "buffer", "overflow", "integer", "crash", "crashed", "memory", "null", "pointer", "null pointer",
                "overflows", "corruption", "service", "disclosure", "scope", "out", "out-of-bonds", "leak", "undefined",
                "uninitialized", "kernal", "panic", "bounds", "bypass", "use-after-free", "heap", "dereference", "missing",
                "call"
        };

        String[] Windows_Exploits = {
                "windows", "powershell", "win", "dos", "ms", "exe", "fat", "ntfs", "fat16", "fat32", "exfat"
        };

        String[] Linux_Exploits = {
                "linux", "gnome", "kali", "distro", "terminal", "gtk", "ext2", "ext3", "ext4", "unix", "ubuntu",
                "bungie", "mint", "chmod", "bash", "grub"
        };

        String[] Unix_Exploits = {
                "unix", "solaris", "bsd", "pwb", "cb"
        };

        String[] OSX_Exploits = {
                "macos", "osx", "sierra", "high sierra", "high", "tiger", "leopard", "mountain", "lion",
                "el capitan", "yosemite", "mavericks", "hybrid", "xnu", "macintosh"
        };

        // [<Title>, <Platform>, <Author>];
        List<String[]> DENIAL_OF_SERVICE_CATEGORY = new ArrayList<>();
        List<String[]> POS_CATEGORY = new ArrayList<>();
        List<String[]> WIN_CATEGORY = new ArrayList<>();
        List<String[]> LINUX_CATEGORY = new ArrayList<>();
        List<String[]> UNIX_CATEGORY = new ArrayList<>();
        List<String[]> OSX_CATEGORY = new ArrayList<>();

        for(int i = 0; i < titles.size(); i++) {


            for(int m = 0; m < Denial_Of_Service_Tools.length; m++) {
                if(titles.get(i).contains(Denial_Of_Service_Tools[m])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        DENIAL_OF_SERVICE_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }


            for(int r = 0; r < PoS_Exploits.length; r++) {
                if(titles.get(i).contains(PoS_Exploits[r])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        POS_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }

            for(int q = 0; q < Windows_Exploits.length; q++) {
                if(titles.get(i).contains(Windows_Exploits[q])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        WIN_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }

            for(int q = 0; q < Linux_Exploits.length; q++) {
                if(titles.get(i).contains(Linux_Exploits[q])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        LINUX_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }

            for(int q = 0; q < Unix_Exploits.length; q++) {
                if(titles.get(i).contains(Unix_Exploits[q])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        UNIX_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }

            for(int q = 0; q < OSX_Exploits.length; q++) {
                if(titles.get(i).contains(OSX_Exploits[q])) {
                    if(titles.get(i).contains(this.queried) || platforms.get(i).contains((this.queried))) {
                        OSX_CATEGORY.add(new String[]{titles.get(i), platforms.get(i), authors.get(i)});
                        break;
                    }
                }
            }

        }

        Dictionary<String, List<String[]>> sortedCategories = new Hashtable<>();
        sortedCategories.put("Denial of Service", DENIAL_OF_SERVICE_CATEGORY);
        sortedCategories.put("PoS Exploits", POS_CATEGORY);
        sortedCategories.put("Windows Exploits", WIN_CATEGORY);
        sortedCategories.put("Linux Exploits", LINUX_CATEGORY);
        sortedCategories.put("Unix Exploits", UNIX_CATEGORY);
        sortedCategories.put("OSX Exploits", OSX_CATEGORY);

        // StringUtils.capitalize(DENIAL_OF_SERVICE_CATEGORY.get(i)[0]),

        return sortedCategories;
    }
}
